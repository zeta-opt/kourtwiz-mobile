require 'json'
require 'open3'

# --- Safe autolinking for Expo ---
begin
  node_command = "node --print \"require.resolve('expo/package.json')\""
  stdout, status = Open3.capture2(node_command)
  if status.success? && !stdout.strip.empty?
    require File.join(File.dirname(stdout.strip), "scripts/autolinking")
  else
    puts "[!] Skipping Expo autolinking (expo/package.json not found)"
  end
rescue => e
  puts "[!] Unable to load Expo autolinking script: #{e}"
end

# --- Safe autolinking for React Native ---
begin
  node_command = "node --print \"require.resolve('react-native/package.json')\""
  stdout, status = Open3.capture2(node_command)
  if status.success? && !stdout.strip.empty?
    require File.join(File.dirname(stdout.strip), "scripts/react_native_pods")
  else
    puts "[!] Skipping React Native autolinking (react-native/package.json not found)"
  end
rescue => e
  puts "[!] Unable to load React Native autolinking script: #{e}"
end

# --- Podfile properties ---
podfile_properties = JSON.parse(File.read(File.join(__dir__, 'Podfile.properties.json'))) rescue {}

ENV['RCT_NEW_ARCH_ENABLED'] = '0' if podfile_properties['newArchEnabled'] == 'false'
ENV['EX_DEV_CLIENT_NETWORK_INSPECTOR'] = podfile_properties['EX_DEV_CLIENT_NETWORK_INSPECTOR']

platform :ios, podfile_properties['ios.deploymentTarget'] || '15.1'
install! 'cocoapods',
  :deterministic_uuids => false

prepare_react_native_project!

target 'kourtwizmobile' do
  use_expo_modules!

  if ENV['EXPO_USE_COMMUNITY_AUTOLINKING'] == '1'
    config_command = ['node', '-e', "process.argv=['', '', 'config'];require('@react-native-community/cli').run()"];
  else
    config_command = [
      'npx',
      'expo-modules-autolinking',
      'react-native-config',
      '--json',
      '--platform',
      'ios'
    ]
  end

  # --- Safe integration for react-native-maps ---
  begin
    rn_maps_package = `node --print "require.resolve('react-native-maps/package.json')"` rescue nil
    if rn_maps_package && !rn_maps_package.strip.empty?
      pod 'react-native-google-maps', path: File.dirname(rn_maps_package.strip)
    else
      puts "[!] Skipping react-native-google-maps (react-native-maps not found)"
    end
  rescue => e
    puts "[!] Error resolving react-native-maps: #{e}"
  end

  config = use_native_modules!(config_command)

  use_frameworks! :linkage => podfile_properties['ios.useFrameworks'].to_sym if podfile_properties['ios.useFrameworks']
  use_frameworks! :linkage => ENV['USE_FRAMEWORKS'].to_sym if ENV['USE_FRAMEWORKS']

  use_react_native!(
    :path => config[:reactNativePath],
    :hermes_enabled => podfile_properties['expo.jsEngine'] == nil || podfile_properties['expo.jsEngine'] == 'hermes',
    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/..",
    :privacy_file_aggregation_enabled => podfile_properties['apple.privacyManifestAggregationEnabled'] != 'false',
  )

  pod 'GoogleUtilities', :modular_headers => true
  pod 'FirebaseCoreInternal', :modular_headers => true
  pod 'FirebaseCore', :modular_headers => true
  pod 'nanopb', :modular_headers => true
  
  # Ensure RNFB works correctly
  $RNFirebaseAsStaticFramework = true

  post_install do |installer|
    react_native_post_install(
      installer,
      config[:reactNativePath],
      :mac_catalyst_enabled => false,
      :ccache_enabled => podfile_properties['apple.ccacheEnabled'] == 'true',
    )

    # Workaround for Xcode 14 signing resource bundles
    installer.target_installation_results.pod_target_installation_results
      .each do |pod_name, target_installation_result|
      target_installation_result.resource_bundle_targets.each do |resource_bundle_target|
        resource_bundle_target.build_configurations.each do |config|
          config.build_settings['CODE_SIGNING_ALLOWED'] = 'NO'
        end
      end
    end
  end
end
